@page "/todoList"
@rendermode InteractiveServer
@using System.Globalization
@using BlazorBootstrap
@inject TarefaService Tarefas

<PageTitle>Lista de Tarefas</PageTitle>

@if (!Auth.isAuthd) 
{
    <p>Usuário não autenticado!</p>
} 
else 
{

    @if (errorDeletingTask) {
        <div class="alert alert-danger" role="alert">
            Tarefa não removida! Assegure-se que ela está <b>Completa</b> antes de deleta-la.
        </div>
    }
    <h3>Lista de Tarefas</h3>

    

    <div class="accordion" id="mainAcc">
        @foreach (var curTodo in tarefas) // Substituindo TodoList.Get() por tarefas do banco de dados
        {
            var collapseId = $"coll-{curTodo.Id}";
            var headingId = $"hea-{curTodo.Id}";
            var itemId = $"it-{curTodo.Id}";

            <div class="accordion-item" id="@itemId">
                <h2 class="accordion-header" id="@headingId">
                    <button class="accordion-button collapsed" type="button" 
                            data-bs-toggle="collapse" data-bs-target="#@collapseId"
                            aria-expanded="false" aria-controls="@collapseId">
                        <input type="checkbox" @bind="curTodo.isDone" /> &nbsp; @curTodo.Title <Badge Color="@retDifficultyColor(curTodo.Difficulty)"
                                Position="Position.Absolute"
                                Placement="BadgePlacement.TopLeft"
                                IndicatorType="BadgeIndicatorType.RoundedPill"
                                VisuallyHiddenText="unread messages"> @retReadableDifficulty(curTodo.Difficulty)
                            </Badge> &nbsp;
                    </button>
                </h2>
                <div id="@collapseId" class="accordion-collapse " 
                     aria-labelledby="@headingId" data-bs-parent="#@itemId">
                    <div class="accordion-body">
                        
                        @if (!editModes.ContainsKey(curTodo.Id) || !editModes[curTodo.Id]) 
                        {
                            <strong>Descrição:&nbsp;</strong> @curTodo.Description <br />
                            <strong>Data de Entrega:&nbsp;</strong> @curTodo.DueDate.ToString() <br />
                            <p /><button @onclick="() => ToggleEditMode(curTodo.Id)">Editar</button> <i>&nbsp;</i>
                        } 
                        else 
                        {
                            <b>Titulo:&nbsp;</b>      <input autofocus class="form-control input-sm" @bind="curTodo.Title"/> <p />
                            <b>Descrição:&nbsp;</b>   <textarea class="form-control input-lg" style="height:85px" @bind="curTodo.Description"/> <p />
                            <b>Data De Entrega:&nbsp;</b> <input class="form-control input-sm" type="datetime-local" @bind="curTodo.DueDate"/> <p />
                            
                            <p><b>Dificuldade:</b></p> //  <input class="form-control input-sm" @bind="newTodoDificulty"/> <p />
                            <InputSelect class="" @bind-Value="curTodo.Difficulty">
                                <option value="1">Fácil</option>
                                <option value="2">Média</option>
                                <option value="3">Difícil</option>
                                <option value="4">Extrema</option>
                            </InputSelect> <p></p>

                            <p /><button @onclick="() => SaveTask(curTodo)">Salvar</button> <i>&nbsp;</i>
                        }
                        
                        <button @onclick="() => removeTask(curTodo)">Deletar</button>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code 
{
    // Variáveis

    bool errorDeletingTask;
    Dictionary<Guid, bool> editModes = new();
    List<TodoItemCompleto> tarefas = new(); // Lista para armazenar as tarefas do banco de dados.
    
    public string retReadableDifficulty(string val) {
        switch(val) {
            case "1": return "Fácil";
            case "2": return "Médio";
            case "3": return "Difícil";
            case "4": return "Extrema";
            default: return "não Identificado";
        }
    }

    public BlazorBootstrap.BadgeColor retDifficultyColor(string val) {
        switch(val) {
            case "1": return BadgeColor.Success;
            case "2": return BadgeColor.Warning;
            case "3": return BadgeColor.Danger;
            case "4": return BadgeColor.Dark;
            default: return BadgeColor.Info;
        }
    }
    

    // Método para carregar as tarefas do banco de dados
    protected override async Task OnInitializedAsync()
    {
        tarefas = await Tarefas.GetTarefasByUserAsync(Auth.curUser.Id); // Obtendo as tarefas do banco
    }

    // Alternar entre modos de edição
    void ToggleEditMode(Guid taskId) 
    {
        if (!editModes.ContainsKey(taskId))
        {
            editModes[taskId] = true;
        }
        else 
        {
            editModes[taskId] = !editModes[taskId];
        }
    }

    // Salvar alterações de tarefa no banco
    async Task SaveTask(TodoItemCompleto curTodo)
    {
        await Tarefas.EditTarefaAsync(curTodo); // Chama o método de atualização do TarefaService
        editModes[curTodo.Id] = false; // Fecha o modo de edição
    }

    // Remover tarefa do banco
    async Task removeTask(TodoItemCompleto curTodo) 
    {
        if (curTodo.isDone) 
        {
            await Tarefas.RemoveTarefaAsync(curTodo.Id); // Chama o método de remoção do TarefaService
            tarefas.Remove(curTodo); // Remove da lista local
            errorDeletingTask = false;
        }
        else {
            errorDeletingTask = true;
        }
    }
}
